<!DOCTYPE html>
<html>

<head>
    <title>TODO App</title>
    <style>
        .container {
            font-family: Arial, sans-serif;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
            height: 100vh;
            margin: 15px;
        }
        body {
            font-family: Arial, sans-serif;
            gap: 16px;
            height: 100vh;
            margin: 15px;

        }
        .todo-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .todo-item {
            display: flex;
            align-items: center;
            padding: 8px;
            border-bottom: 1px solid #ccc;
        }



        .form-container {
            display: flex;
            flex-direction: column;
            margin: 25px 0 0 0;
        }

        .form-container form {
            display: flex;
            gap: 8px;
        }

        .form-container input[type="text"] {
            flex: 1;
        }

        .form-container button {
            padding: 8px 16px;
        }

        .container ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

       .container ul li {
    display: flex;
    align-items: center;
    gap: 10px; /* Add space between text, image, and buttons */
    border: 1px solid #ddd;
    margin-top: -1px;
    /* Prevent double borders */
    background-color: #f6f6f6;
    padding: 12px;
    font-size: 18px;
    color: black;
    position: relative;
}

.container ul li div {
    display: flex;
    align-items: center;
    gap: 10px; /* Add space between buttons */
    position: absolute;
    right: 5px;
    top: 50%;
    /* To vertically center the buttons within the <li> */
    transform: translateY(-50%);
}
        .container li:hover {
            background-color: #eee;
        }

        .close {
            cursor: pointer;
            position: absolute;
            top: 50%;
            right: 0%;
            padding: 12px 16px;
            transform: translate(0%, -50%);
        }

        .close:hover {
            background: #bbb;
        }
       .scaled-image {
    max-width: 80px; /* Set the maximum width */
    max-height: 60px; /* Set the maximum height */
    width: 30px; /* Let the browser automatically adjust the width */
    height: 30px; /* Let the browser automatically adjust the height */
    margin: 20px;
    /* Additional styles if needed */
  }
    </style>
</head>

<body>
    <%- include("component/header", {name:name}) %>
        <div class="container">
            <div class="todo-container">
                <h1>Task List</h1>
                <%- include("component/data",{ todos:todos}) %>
            </div>
            <div class="form-container">
            <!-- Modify the form to include both text and picture fields -->
            <form id="todoForm" enctype="multipart/form-data">
                <input type="text" id="todoText" placeholder="Enter a new TODO" required>
                <input type="file" required name='picture' id='picture'>
                <button type="button" onclick="addTodo()">Add TODO</button>
            </form>

            </div>
        </div>
        <script>
            // Add your JavaScript code here
            const todoForm = document.getElementById('todoForm');
            const todoText = document.getElementById('todoText');
            const todoList = document.getElementById('todoList');
             function fetchTodos() {
                    fetch('/todos')
                        .then(response => response.json())
                        .then(todos => displayTodos(todos))
                        .catch(error => console.error('Error fetching todos:', error));
                }

            
           async function completedTodo(id) {
                const checkbox = document.getElementById(id);
                if (checkbox) {
                    const isChecked = checkbox.checked;
                    const span = checkbox.parentNode.previousSibling;
                    if (span) {
                        span.style.textDecoration = isChecked ? 'line-through' : 'none';
                    }
                }
            }

            // JavaScript code to add a new TODO with text and picture
                async function addTodo() {
                    const todoTextInput= document.getElementById('todoText')
                    const todoText = todoTextInput.value.trim();
                    const todoPictureInput = document.getElementById('picture');
                    const todoPicture = todoPictureInput.files[0];

                    if (todoText === '' || !todoPicture) return;

                    const formData = new FormData();
                    formData.append('text', todoText);
                    formData.append('picture', todoPicture);

                    try {
                        const response = await fetch('/todos', {
                            method: 'POST',
                            body: formData,
                        });

                        const newTodo = await response.json();
                        todoTextInput.value = '';
                        todoPictureInput.value='';

                        displayNewTodo(newTodo); // Call the new function to display the new TODO item
                    } catch (error) {
                        console.error('Error adding todo:', error);
                    }
                }

                // Modify the displayTodos function to show images (if available) for each task
                function displayTodos(todos) {
                    const todoList = document.getElementById('todoList');
                    todoList.innerHTML = '';
                    todos.forEach(todo => {
                        const li = document.createElement('li');
                        const span = document.createElement('span');
                        const image = document.createElement('img');
                        const div = document.createElement('div');
                        image.width = 50;
                        image.height = 50;
                        span.textContent = todo.text;
                        image.src = todo.picture ? `/uploads/${todo.picture}` : 'placeholder.png';
                        image.alt = 'Todo Image';
                        div.innerHTML = `
                        <button onclick="editTodo('${todo._id}')">Edit</button>
                        <input type="checkbox" id="${todo.id}" class="strikethrough" onclick="completedTodo('${todo.id}')">
                        <button onclick="deleteTodo('${todo._id}')">&times;</button>
                        `;
                        li.appendChild(image);
                        li.appendChild(span);
                        li.appendChild(div);
                        todoList.appendChild(li);
                    });
                }

// The rest of the JavaScript code remains the same.


        //    <!-- Modify the displayNewTodo function to show the image (if available) for the new task -->
            function displayNewTodo(todo) {
                const todoList = document.getElementById('todoList');
                const li = document.createElement('li');
                const span = document.createElement('span');
                const div = document.createElement('div');

                span.textContent = todo.text;
                div.innerHTML = `
                <button onclick="editTodo('${todo._id}')">Edit</button>
                <input type="checkbox" id="${todo.id}" class="strikethrough" onclick="completedTodo('${todo.id}')">
                <button onclick="deleteTodo('${todo._id}')">&times;</button>
            `;

                // If the task has an associated image, create an image element and set its src attribute
                if (todo.picture) {
                    const img = document.createElement('img');
                    img.src = `/uploads/${todo.picture}`;
                    img.alt = 'Todo Image';
                    img.classList.add('scaled-image'); // Add the 'scaled-image' class to the image element
                    li.appendChild(img);
                }

                li.appendChild(span);
                li.appendChild(div);
                todoList.appendChild(li);   
            }
            async function editTodo(id) {
                const newText = prompt('Enter the updated text:');
                if (newText === null || newText.trim() === '') return;

                try {
                    const response = await fetch(`/todos/${id}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ text: newText }),
                    });

                    const updatedTodo = await response.json();
                    fetchTodos();
                } catch (error) {
                    console.error('Error editing todo:', error);
                }
            }

            async function deleteTodo(id) {
                try {
                    await fetch(`/todos/${id}`, { method: 'DELETE' });
                    fetchTodos();
                } catch (error) {
                    console.error('Error deleting todo:', error);
                }
            }

            todoForm.addEventListener('submit', event => {
                // event.preventDefault();
                addTodo();
            });
            fetchTodos();
        </script>
</body>

</html>
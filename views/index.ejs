<!DOCTYPE html>
<html>

<head>
    <title>TODO App</title>
    <style>
        .container {
            font-family: Arial, sans-serif;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
            height: 100vh;
            margin: 15px;
        }

        body {
            font-family: Arial, sans-serif;
            gap: 16px;
            height: 100vh;
            margin: 15px;

        }




        .todo-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .todo-item {
            display: flex;
            align-items: center;
            padding: 8px;
            border-bottom: 1px solid #ccc;
        }



        .form-container {
            display: flex;
            flex-direction: column;
            margin: 25px 0 0 0;
        }

        .form-container form {
            display: flex;
            gap: 8px;
        }

        .form-container input[type="text"] {
            flex: 1;
        }

        .form-container button {
            padding: 8px 16px;
        }

        .container ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        .container li {
            border: 1px solid #ddd;
            margin-top: -1px;
            /* Prevent double borders */
            background-color: #f6f6f6;
            padding: 12px;
            text-decoration: none;
            font-size: 18px;
            color: black;
            display: block;
            position: relative;
        }

        .container ul li div {
            position: absolute;
            right: 5px;
            top: 50%;
            /* To vertically center the button within the <li> */
            transform: translateY(-50%);
        }

        .container li:hover {
            background-color: #eee;
        }

        .close {
            cursor: pointer;
            position: absolute;
            top: 50%;
            right: 0%;
            padding: 12px 16px;
            transform: translate(0%, -50%);
        }

        .close:hover {
            background: #bbb;
        }
    </style>
</head>

<body>
    <%- include("component/header", {name:name}) %>
        <div class="container">
            <div class="todo-container">
                <h1>Task List</h1>
                <%- include("component/data",{ todos:todos}) %>
            </div>
            <div class="form-container">
                <form id="todoForm">
                    <input type="text" id="todoText" placeholder="Enter a new TODO" required>
                    <button type="submit">Add TODO</button>
                </form>
            </div>
        </div>
        <script>
            // Add your JavaScript code here
            const todoForm = document.getElementById('todoForm');
            const todoText = document.getElementById('todoText');
            const todoList = document.getElementById('todoList');
             function fetchTodos() {
                    fetch('/todos')
                        .then(response => response.json())
                        .then(todos => displayTodos(todos))
                        .catch(error => console.error('Error fetching todos:', error));
                }

            function displayTodos(todos) {
                todoList.innerHTML = '';

                todos.forEach(todo => {
                    const li = document.createElement('li');
                    li.innerHTML = `
                
          <span id="${todo.id}">${todo.text}</span>
          <div>
          <button onclick="editTodo('${todo.id}')">Edit</button>
          <input type="checkbox" id="${todo.id}" class="strikethrough" onclick="completedTodo('${todo.id}')" >
          <button onclick="deleteTodo('${todo.id}')">&times;</button>
          </div>
         `;
                    todoList.appendChild(li);
                });
            }
            async function completedTodo(todoid) {
                const spanElement = await document.getElementById(todoid);
                if (spanElement) {
                    spanElement.style.textDecoration = spanElement.style.textDecoration === "line-through" ? "none" : "line-through";
                }

            }

            async function addTodo() {
                const text = todoText.value.trim();
                if (text === '') return;

                try {
                    const response = await fetch('/todos', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ text }),
                    });

                    const newTodo = await response.json();
                    todoText.value = '';
                    displayNewTodo(newTodo); // Call the new function to display the new TODO item
                } catch (error) {
                    console.error('Error adding todo:', error);
                }
            }

            function displayNewTodo(todo) {
                const li = document.createElement('li');
                li.innerHTML = `
           
        <span id="${todo.id}">${todo.text}</span>
         <div>
          <button onclick="editTodo('${todo.id}')">Edit</button>
          <input type="checkbox" id="${todo.id}" class="strikethrough" onclick="completedTodo('${todo.id}')" >
          <button onclick="deleteTodo('${todo.id}')">&times;</button>
          </div>
      `;
                todoList.appendChild(li);
            }

            async function editTodo(id) {
                const newText = prompt('Enter the updated text:');
                if (newText === null || newText.trim() === '') return;

                try {
                    const response = await fetch(`/todos/${id}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ text: newText }),
                    });

                    const updatedTodo = await response.json();
                    fetchTodos();
                } catch (error) {
                    console.error('Error editing todo:', error);
                }
            }

            async function deleteTodo(id) {
                if (!confirm('Are you sure you want to delete this TODO?')) return;

                try {
                    await fetch(`/todos/${id}`, { method: 'DELETE' });
                    fetchTodos();
                } catch (error) {
                    console.error('Error deleting todo:', error);
                }
            }

            todoForm.addEventListener('submit', event => {
                event.preventDefault();
                addTodo();
            });
            fetchTodos();
        </script>
</body>

</html>